# 测速链接
url: &url { url: "https://www.google.com/generate_204" }

providers: &providers { type: http, interval: 86400, proxy: DIRECT, header: { User-Agent: ["clash-verge/v2.3.2"] }, health-check: { enable: true, <<: *url,  interval: 3600, timeout: 10000 }, exclude-filter: "(?i)🇦🇶|流量|到期|重置|频道|订阅|官网" }
# udp是否启用，ip-version(dual, ipv4, ipv6, ipv4-prefer, ipv6-prefer)，additional-prefix节点添加前缀
proxy-providers: 
  link1: { url: "订阅链接", path: ./providers/link1.yaml, <<: *providers, override: { udp: true, ip-version: dual, additional-prefix: "link1 " } }
  # link2: { url: "订阅链接", path: ./providers/link2.yaml, <<: *providers, override: { udp: true, ip-version: dual, additional-prefix: "link2 " } }

# 主选择包括订阅，如[link1,link2]
use: &use { use: [link1] }
# 地区分组自动均衡策略使用订阅
area: &area { use: [link1] }








## 配置 ##
# 允许局域网
allow-lan: true
bind-address: "*"
# 默认运行模式
mode: rule
# log: silent, error, warning, info, debug
log-level: error
# 接收ipv6
ipv6: true
# 检测连接时间间隔
keep-alive-interval: 30
# 最大空闲时间
keep-alive-idle: 120
# 禁用持久连接
disable-keep-alive: false
# 进程匹配: 自动strict, 强制always, off关闭
find-process-mode: strict
# 统一延迟，计算RTT消除连接握手延迟
unified-delay: true
# TCP并发连接dns解析出的所有IP，使用第一个成功连接
tcp-concurrent: true
# 全局TLS指纹: chrome, firefox, ios, android, random 等
global-client-fingerprint: random
# 外部控制
external-controller: 0.0.0.0:9090
secret: "密码"
# 缓存
profile:
  # 缓存策略组选择
  store-selected: true
  # 缓存fake-ip
  store-fake-ip: true
# 实验性配置
experimental:
  # 禁用GSO
  quic-go-disable-gso: true
  # 禁用ECN
  quic-go-disable-ecn: true
  # 启用IP4P地址转换
  dialer-ip4p-convert: false

## 外部资源 ##
# 外部资源下载UA
global-ua: mihomo
# 外部资源下载ETag支持
etag-support: true
# 外部用户界面
external-ui: ./dashboard
external-ui-url: "https://ghfast.top/https://github.com/Zephyruso/zashboard/releases/latest/download/dist.zip"
# 外部规则
ip: &ip { type: http, interval: 86400, behavior: ipcidr, format: mrs, proxy: DIRECT }
domain: &domain { type: http, interval: 86400, behavior: domain, format: mrs, proxy: DIRECT }
rule-providers:
  ads: { type: http, interval: 86400, behavior: domain, format: yaml, proxy: DIRECT, url: "https://cdn.uura.cn/AWAvenue/AWAvenue-Ads-Rule-Clash.yaml", path: ./rules/ads.yaml }
  private: { <<: *domain, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/private.mrs", path: ./rules/private.mrs }
  proxy_domain: { type: http, interval: 86400, behavior: domain, format: text, proxy: DIRECT, url: "https://gcore.jsdelivr.net/gh/echs-top/proxy@main/rules/proxy_domain.list", path: ./rules/proxy_domain.list }
  direct_domain: { type: http, interval: 86400, behavior: domain, format: text, proxy: DIRECT, url: "https://gcore.jsdelivr.net/gh/echs-top/proxy@main/rules/direct_domain.list", path: ./rules/direct_domain.list }
  googlefcm: { <<: *domain, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/googlefcm.mrs", path: ./rules/googlefcm.mrs }
  steam-cn: { <<: *domain, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/steam@cn.mrs", path: ./rules/steam-cn.mrs }
  telegram: { <<: *domain, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/telegram.mrs", path: ./rules/telegram.mrs }
  twitter: { <<: *domain, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/twitter.mrs", path: ./rules/twitter.mrs }
  spotify: { <<: *domain, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/spotify.mrs", path: ./rules/spotify.mrs }
  tiktok: { <<: *domain, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/tiktok.mrs", path: ./rules/tiktok.mrs }
  youtube: { <<: *domain, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/youtube.mrs", path: ./rules/youtube.mrs }
  netflix: { <<: *domain, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/netflix.mrs", path: ./rules/netflix.mrs }
  github: { <<: *domain, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/github.mrs", path: ./rules/github.mrs }
  cloudflare: { <<: *domain, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/cloudflare.mrs", path: ./rules/cloudflare.mrs }
  openai: { <<: *domain, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/openai.mrs", path: ./rules/openai.mrs }
  gemini: { <<: *domain, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/google-gemini.mrs", path: ./rules/gemini.mrs }
  pixiv: { <<: *domain, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/pixiv.mrs", path: ./rules/pixiv.mrs }
  bilibili: { <<: *domain, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/bilibili.mrs", path: ./rules/bilibili.mrs }
  biliintl: { <<: *domain, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/biliintl.mrs", path: ./rules/biliintl.mrs }
  apple: { <<: *domain, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/apple.mrs", path: ./rules/apple.mrs }
  google: { <<: *domain, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/google.mrs", path: ./rules/google.mrs }
  microsoft-cn: { <<: *domain, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/microsoft@cn.mrs", path: ./rules/microsoft-cn.mrs }
  non_cn: { <<: *domain, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/geolocation-!cn.mrs", path: ./rules/non_cn.mrs }
  cn: { <<: *domain, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geosite/cn.mrs", path: ./rules/cn.mrs }
  private_ip: { <<: *ip, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geoip/private.mrs",  path: ./rules/private_ip.mrs }
  proxy_ip: { type: http, interval: 86400, behavior: ipcidr, format: text, proxy: DIRECT, url: "https://gcore.jsdelivr.net/gh/echs-top/proxy@main/rules/proxy_ip.list", path: ./rules/proxy_ip.list }
  direct_ip: { type: http, interval: 86400, behavior: ipcidr, format: text, proxy: DIRECT, url: "https://gcore.jsdelivr.net/gh/echs-top/proxy@main/rules/direct_ip.list", path: ./rules/direct_ip.list }
  telegram_ip: { <<: *ip, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geoip/telegram.mrs", path: ./rules/telegram_ip.mrs }
  twitter_ip: { <<: *ip, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geoip/twitter.mrs", path: ./rules/twitter_ip.mrs }
  netflix_ip: { <<: *ip, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geoip/netflix.mrs", path: ./rules/netflix_ip.mrs }
  cloudflare_ip: { <<: *ip, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geoip/cloudflare.mrs", path: ./rules/cloudflare_ip.mrs }
  google_ip: { <<: *ip, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geoip/google.mrs", path: ./rules/google_ip.mrs }
  cn_ip: { <<: *ip, url: "https://gcore.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@meta/geo/geoip/cn.mrs", path: ./rules/cn_ip.mrs }

## 入站 ##
# 混合端口: HTTP、SOCKS
mixed-port: 7890
# 透明代理，接TCP与UDP
tproxy-port: 7891
# 透明代理，仅TCP
redir-port: 7892
# TUN
tun:
  enable: true
  device: meta
  # tun模式堆栈: system/gvisor/mixed
  stack: mixed
  # 自动全局路由
  auto-route: true
  # 自动配置iptables/nftables
  auto-redirect: true
  # 自动选择流量出口
  auto-detect-interface: true
  # 严格执行路由规则
  strict-route: true
  # dns劫持
  dns-hijack:
    - "any:53"
    - "any:853"
    - "tcp://any:53"
    - "tcp://any:853"
  # 最大传输单元
  mtu: 9000
  # UDP NAT 过期时间
  udp-timeout: 600

## 解析 ##
# hosts
hosts: 
  dns.google: [8.8.8.8,8.8.4.4,"2001:4860:4860::8888","2001:4860:4860::8844"]
  zns.lehu.in: [47.76.113.103]
  dns.alidns.com: [223.5.5.5,223.6.6.6,"2400:3200::1","2400:3200:baba::1"]
  doh.pub: [120.53.53.53,1.12.12.21,1.12.12.12]
  cloudflare-dns.com: [1.1.1.1,1.0.0.1,"2606:4700:4700::1111","2606:4700:4700::1001"]
  v.recipes: [104.26.0.241,104.26.1.241,172.67.69.243,"2606:4700:20::681a:1f1","2606:4700:20::681a:f1","2606:4700:20::ac43:45f3"]
  dns.twnic.tw: [101.102.103.104,101.101.101.101,"2001:de4::102","2001:de4::101"]
  services.googleapis.cn: services.googleapis.com
# dns
dns: 
  enable: true
  # 缓存算法: arc, lru
  cache-algorithm: arc
  ipv6: true
  # doh http3
  prefer-h3: true
  # 启用hosts
  use-hosts: true
  use-system-hosts: true
  # dns遵守路由规则
  respect-rules: true
  # DNS服务监听
  listen: 0.0.0.0:1053
  # DNS 处理模式
  enhanced-mode: fake-ip
  # fakeip ip段
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  #fakeip排除列表
  fake-ip-filter: ["*","5228","sharepoint.com","steamcdn-a.akamaihd.net","dns.alidns.com","zns.lehu.in","doh.pub","v.recipes","dns.google","cloudflare-dns.com","dns.twnic.tw","RULE-SET:private,direct_domain,googlefcm,steam-cn,bilibili,apple,microsoft-cn,cn"]
  # 仅用于解析nameserver等，仅限ip
  default-nameserver: [223.5.5.5,119.29.29.29]
  # 仅用于解析代理节点域名，仅限能直连dns
  proxy-server-nameserver:
    - "https://dns.alidns.com/dns-query#DIRECT&h3=true"
    - "https://doh.pub/dns-query#DIRECT&h3=false"
    - "https://v.recipes/dns-cn#DIRECT&h3=true"
  # 默认dns
  nameserver:
    - "https://dns.google/dns-query#DNS查询&h3=true"
    - "https://cloudflare-dns.com/dns-query#DNS查询&h3=true"
    - "https://dns.twnic.tw/dns-query#DNS查询&h3=false"
  # 直连策略dns
  direct-nameserver:
    - "https://dns.alidns.com/dns-query#DIRECT&h3=true"
    - "https://doh.pub/dns-query#DIRECT&h3=false"
# 域名嗅探
sniffer: 
  enable: true
  # 强制嗅探redir-host类型流量(非fake ip)
  force-dns-mapping: false
  # 强制嗅探未获取到域名的ip
  parse-pure-ip: false
  # 使用嗅探结果覆盖
  override-destination: true
  # 嗅探端口
  sniff: 
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  # 跳过域名
  skip-domain: ["RULE-SET:private","+.push.apple.com","Mijia Cloud"]
  # 强制嗅探域名
  force-domain: ["RULE-SET:netflix"]
  # 跳过ip
  skip-src-address: ["RULE-SET:private_ip"]

## 路由规则 ##
rules:
  # dns端口劫持
  - OR,((DST-PORT,53),(DST-PORT,853)),dns-hijack
  # 私人域名
  - OR,((RULE-SET,private),(RULE-SET,private_ip,no-resolve)),DIRECT
  # dns规则
  - OR,((DOMAIN,dns.google),(DOMAIN,cloudflare-dns.com),(DOMAIN,zns.lehu.in),(DOMAIN,dns.twnic.tw),(IP-SUFFIX,47.76.113.103/24,no-resolve),(IP-SUFFIX,8.8.8.8/24,no-resolve),(IP-SUFFIX,8.8.4.4/24,no-resolve),(IP-SUFFIX,1.1.1.1/24,no-resolve),(IP-SUFFIX,1.0.0.1/24,no-resolve),(IP-SUFFIX,101.102.103.104/24,no-resolve),(IP-SUFFIX,101.101.101.101/24,no-resolve),(IP-SUFFIX,9.9.9.11/24,no-resolve),(IP-SUFFIX,149.112.112.11/24,no-resolve),(IP-SUFFIX,2001:4860:4860::8888/32,no-resolve),(IP-SUFFIX,2001:4860:4860::8844/32,no-resolve),(IP-SUFFIX,2606:4700:4700::1001/32,no-resolve),(IP-SUFFIX,2606:4700:4700::1111/32,no-resolve),(IP-SUFFIX,2001:de4::102/32,no-resolve),(IP-SUFFIX,2001:de4::101/32,no-resolve)),DNS查询
  - OR,((DOMAIN,dns.alidns.com),(DOMAIN,doh.pub),(DOMAIN,v.recipes),(IP-SUFFIX,223.5.5.5/24,no-resolve),(IP-SUFFIX,223.6.6.6/24,no-resolve),(IP-SUFFIX,119.29.29.29/24,no-resolve),(IP-SUFFIX,104.26.0.241/24,no-resolve),(IP-SUFFIX,104.26.1.241/24,no-resolve),(IP-SUFFIX,172.67.69.243/24,no-resolve),(IP-SUFFIX,120.53.53.53/24,no-resolve),(IP-SUFFIX,1.12.12.12/24,no-resolve),(IP-SUFFIX,1.12.12.21/24,no-resolve),(IP-SUFFIX,2400:3200:baba::1/32,no-resolve),(IP-SUFFIX,2400:3200::1/32,no-resolve),(IP-SUFFIX,2606:4700:20::681a:1f1/32,no-resolve),(IP-SUFFIX,2606:4700:20::681a:f1/32,no-resolve),(IP-SUFFIX,2606:4700:20::ac43:45f3/32,no-resolve)),DIRECT
  # 广告拦截
  - RULE-SET,ads,广告拦截
  # 分流规则
  - OR,((RULE-SET,proxy_domain),(RULE-SET,proxy_ip,no-resolve)),PROXY
  - OR,((RULE-SET,direct_domain),(RULE-SET,direct_ip,no-resolve)),DIRECT
  - OR,((DST-PORT,5228),(RULE-SET,googlefcm)),FCM推送
  - DOMAIN-SUFFIX,sharepoint.com,ONEDRIVE下载
  - OR,((DOMAIN,steamcdn-a.akamaihd.net),(RULE-SET,steam-cn)),STEAM中国
  - OR,((RULE-SET,telegram),(RULE-SET,telegram_ip,no-resolve),(PROCESS-NAME-REGEX,(?i)Telegram),(PROCESS-NAME,tw.nekomimi.nekogram)),TELEGRAM
  - OR,((RULE-SET,twitter),(RULE-SET,twitter_ip,no-resolve),(PROCESS-NAME-REGEX,(?i)Twitter)),TWITTER
  - OR,((RULE-SET,spotify),(PROCESS-NAME-REGEX,(?i)Spotify)),SPOTIFY
  - OR,((RULE-SET,tiktok),(PROCESS-NAME,com.zhiliaoapp.musically),(PROCESS-NAME,com.ss.android.ugc.trill)),TIKTOK
  - OR,((RULE-SET,youtube),(PROCESS-NAME-REGEX,(?i)Youtube)),YOUTUBE
  - OR,((RULE-SET,netflix),(RULE-SET,netflix_ip,no-resolve)),NETFLIX
  - RULE-SET,github,GITHUB
  - OR,((RULE-SET,cloudflare),(RULE-SET,cloudflare_ip,no-resolve)),CLOUDFLARE
  - OR,((RULE-SET,openai),(RULE-SET,gemini) ,(DOMAIN-SUFFIX,lingq.com,),(DOMAIN-SUFFIX,youglish.com,),(DOMAIN-SUFFIX,deepl.com,),(DOMAIN-SUFFIX,chat.openai.com,),(DOMAIN-SUFFIX,grammarly.com,),(DOMAIN-KEYWORD,(?i)sci-hub)),AI
  - OR,((RULE-SET,pixiv),(PROCESS-NAME,jp.pxv.android)(PROCESS-NAME,com.perol.play.pixez)),PIXIV
  - OR,((RULE-SET,bilibili),(RULE-SET,biliintl),(PROCESS-NAME-REGEX,.*bilibili.*)(PROCESS-NAME-REGEX,.*bili.*)),哔哩哔哩
  - RULE-SET,apple,APPLE
  - OR,((RULE-SET,google),(RULE-SET,google_ip,no-resolve),(DOMAIN-SUFFIX,googleapis.cn)),GOOGLE
  - RULE-SET,microsoft-cn,微软中国
  - RULE-SET,non_cn,PROXY
  - OR,((RULE-SET,cn),(RULE-SET,cn_ip)),DIRECT
  # 代理兜底
  - MATCH,PROXY

## 策略组 ##
# dns端口劫持
proxies: [{ name: dns-hijack, type: dns }]
zl: &zl { type: select, proxies: [DIRECT,PROXY,香港|自动,香港|均衡,台湾|自动,台湾|均衡,日本|自动,日本|均衡,新加坡|自动,新加坡|均衡,美国|自动,美国|均衡,英国|自动,英国|均衡,自动选择,故障转移], <<: *use } 
dl: &dl { type: select, proxies: [PROXY,DIRECT,香港|自动,香港|均衡,台湾|自动,台湾|均衡,日本|自动,日本|均衡,新加坡|自动,新加坡|均衡,美国|自动,美国|均衡,英国|自动,英国|均衡,自动选择,故障转移], <<: *use }
auto: &auto { type: url-test, <<: *area, tolerance: 50, lazy: true, hidden: true }
bal: &bal { type: load-balance, strategy: round-robin, <<: *area, lazy: true, hidden: true }
proxy-groups:
  - { name: PROXY, type: select, proxies: [香港|自动,香港|均衡,台湾|自动,台湾|均衡,日本|自动,日本|均衡,新加坡|自动,新加坡|均衡,美国|自动,美国|均衡,英国|自动,英国|均衡,自动选择,故障转移], <<: *use, icon: https://proxy.echs.top/icon/Global.webp }
  - { name: DNS查询, <<: *dl, icon: https://proxy.echs.top/icon/Server.webp }
  - { name: 广告拦截, type: select, proxies: [REJECT,REJECT-DROP,PASS], icon: https://proxy.echs.top/icon/Forbidden.webp }
  - { name: FCM推送, <<: *zl, icon: https://proxy.echs.top/icon/FCM_Firebase_Cloud_Messaging.webp }
  - { name: ONEDRIVE下载, <<: *zl, icon: https://proxy.echs.top/icon/OneDrive.webp }
  - { name: STEAM中国, <<: *zl, icon: https://proxy.echs.top/icon/Steam.webp }
  - { name: TELEGRAM, <<: *dl, icon: https://proxy.echs.top/icon/Telegram.webp }
  - { name: TWITTER, <<: *dl, icon: https://proxy.echs.top/icon/X.webp }
  - { name: SPOTIFY, <<: *dl, icon: https://proxy.echs.top/icon/Spotify.webp }
  - { name: TIKTOK, <<: *dl, icon: https://proxy.echs.top/icon/TikTok.webp }
  - { name: YOUTUBE, <<: *dl, icon: https://proxy.echs.top/icon/YouTube.webp }
  - { name: NETFLIX, <<: *dl, icon: https://proxy.echs.top/icon/Netflix.webp }
  - { name: GITHUB, <<: *dl, icon: https://proxy.echs.top/icon/GitHub.webp }
  - { name: CLOUDFLARE, <<: *dl, icon: https://proxy.echs.top/icon/CloudFlare.webp }
  - { name: AI, <<: *dl, icon: https://proxy.echs.top/icon/AI.webp }
  - { name: PIXIV, <<: *dl, icon: https://proxy.echs.top/icon/Pixiv.webp }
  - { name: 哔哩哔哩, <<: *zl, icon: https://proxy.echs.top/icon/Bilibili.webp }
  - { name: APPLE, <<: *zl, icon: https://proxy.echs.top/icon/Apple_black.webp }
  - { name: GOOGLE, <<: *dl, icon: https://proxy.echs.top/icon/Google.webp }
  - { name: 微软中国, <<: *zl, icon: https://proxy.echs.top/icon/Microsoft.webp }
  - { name: 自动选择, type: url-test, <<: *use, tolerance: 100, lazy: true, hidden: true, icon: https://proxy.echs.top/icon/Fast.webp }
  - { name: 故障转移, type: fallback, <<: *use, lazy: true, hidden: true, icon: https://proxy.echs.top/icon/Network_2.webp }
  - { name: 香港|自动, <<: *auto, filter: "(?i)🇭🇰|香港|HK|hongkong|hong kong", icon: https://proxy.echs.top/icon/Hong_Kong.webp }
  - { name: 台湾|自动, <<: *auto, filter: "(?i)🇹🇼|台湾|TW|taiwan", icon: https://proxy.echs.top/icon/Taiwan_Province.webp }
  - { name: 日本|自动, <<: *auto, filter: "(?i)🇯🇵|日本|JP|japan", icon: https://proxy.echs.top/icon/Japan.webp }
  - { name: 新加坡|自动, <<: *auto, filter: "(?i)🇸🇬|新加坡|SG|singapore", icon: https://proxy.echs.top/icon/Singapore.webp }
  - { name: 美国|自动, <<: *auto, filter: "(?i)🇺🇸|美国|US|unitedstates|united states", icon: https://proxy.echs.top/icon/USA.webp }
  - { name: 英国|自动, <<: *auto, filter: "(?i)🇬🇧|英国|UK|unitedkingdom|united kingdom", icon: https://proxy.echs.top/icon/UK.webp }
  - { name: 香港|均衡, <<: *bal, filter: "(?i)🇭🇰|香港|HK|hongkong|hong kong", icon: https://proxy.echs.top/icon/Hong_Kong.webp }
  - { name: 台湾|均衡, <<: *bal, filter: "(?i)🇹🇼|台湾|TW|taiwan", icon: https://proxy.echs.top/icon/Taiwan_Province.webp }
  - { name: 日本|均衡, <<: *bal, filter: "(?i)🇯🇵|日本|JP|japan", icon: https://proxy.echs.top/icon/Japan.webp }
  - { name: 新加坡|均衡, <<: *bal, filter: "(?i)🇸🇬|新加坡|SG|singapore", icon: https://proxy.echs.top/icon/Singapore.webp }
  - { name: 美国|均衡, <<: *bal, filter: "(?i)🇺🇸|美国|US|unitedstates|united states", icon: https://proxy.echs.top/icon/USA.webp }
  - { name: 英国|均衡, <<: *bal, filter: "(?i)🇬🇧|英国|UK|unitedkingdom|united kingdom", icon: https://proxy.echs.top/icon/UK.webp }
